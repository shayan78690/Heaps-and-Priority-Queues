class Solution {
    class Pair implements Comparable<Pair> {
        int element;
        int freq;

        Pair(int element, int freq) {
            this.element = element;
            this.freq = freq;
        }

        public int compareTo(Pair p) {
            return p.freq - this.freq;
        }
    }

    public int[] topKFrequent(int[] nums, int k) {
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Integer key : map.keySet()) {
            pq.add(new Pair(key, map.get(key)));
        }
        int ans[] = new int[k];
        for (int i = 0; i < k; i++) {
            Pair p = pq.poll();
            ans[i] = p.element;
        }
        return ans;
    }
}
