class Solution {
    public static int kthSmallest(int[] arr, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int n = arr.length;
        for(int i = 0; i < k; i++) {
            pq.add(arr[i]);
        }
        
        for(int i = k; i < n; i++) {
            if(arr[i] < pq.peek()) {
                pq.poll();
                pq.add(arr[i]);
            }
        }
        return pq.peek();
    }
}





import java.util.PriorityQueue;
public class Solution {
    public static int kthSmallest(int n,int k, int[]arr) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i = 0; i < n; i++) {
            pq.add(arr[i]);
        }

        for(int i = 0; i < k-1; i++) {
            pq.poll();
        }

        return pq.poll();
    }
}









class Solution {
    public static int kthSmallest(int[] arr, int k) {
        Arrays.sort(arr);
        return arr[k-1];
    }
}
