class Solution {
    class Pair implements Comparable<Pair> {
        int freq;
        char ch;

        Pair(int freq, char ch) {
            this.freq = freq;
            this.ch = ch;
        }

        public int compareTo(Pair p) {
            return p.freq - this.freq;  
        }
    }

    public String reorganizeString(String s) {
        int[] map = new int[26];  
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            map[ch - 'a']++;
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (int i = 0; i < 26; i++) {
            if (map[i] > 0) {
                pq.add(new Pair(map[i], (char) (i + 'a')));
            }
        }

        StringBuilder ans = new StringBuilder();
        
        while (pq.size() > 1) {
            Pair p1 = pq.poll();  
            char a = p1.ch;
            ans.append(a);
            p1.freq--;

            Pair p2 = pq.poll();  
            char b = p2.ch;
            ans.append(b);
            p2.freq--;

            if (p1.freq > 0) {
                pq.add(new Pair(p1.freq, p1.ch));
            }
            if (p2.freq > 0) {
                pq.add(new Pair(p2.freq, p2.ch));
            }
        }

        if (pq.size() == 1) {
            if (pq.peek().freq == 1) {
                ans.append(pq.peek().ch);
            } else {
                return ""; 
            }
        }

        return ans.toString();
    }
}
