class GFG
 {
     static class Pair implements Comparable<Pair> {
         int val;
         int freq;
         
         Pair(int val, int freq) {
             this.val = val;
             this.freq = freq;
         }
         
         public int compareTo(Pair p) {
             if(this.freq != p.freq) {
                 return p.freq - this.freq;
             } else {
                 return this.val - p.val;
             }
         }
     }
	public static void main (String[] args)
	 {
	     Scanner sc = new Scanner(System.in);
	     int T = sc.nextInt();
	     while(T-- > 0) {
	         int N = sc.nextInt();
	         int arr[] = new int[N];
	         for(int i = 0; i < N; i++) {
	             arr[i] = sc.nextInt();
	         }
	         
	         HashMap<Integer, Integer> map = new HashMap<>();
	         for(int i = 0; i < N; i++) {
	             map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
	         }
	         
	         PriorityQueue<Pair> pq = new PriorityQueue<>();
	         for(Integer key : map.keySet()) {
	             int element = key;
	             int freq = map.get(key);
	             pq.offer(new Pair(element, freq));
	         }
	         
	         List<Integer> ans = new ArrayList<>();
	         while(!pq.isEmpty()) {
	             Pair p = pq.poll();
	             for(int i = 0; i < p.freq; i++) {
	                 ans.add(p.val);
	             }
	         }
	         for(int num : ans) {
	             System.out.print(num+" ");
	         } 
	         System.out.println();
	     }
	 }
}
