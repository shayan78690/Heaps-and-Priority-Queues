class Solution {
    // Custom Pair class to store element and frequency
    static class Pair implements Comparable<Pair> {
        int val;
        int freq;
        
        Pair(int val, int freq) {
            this.val = val;
            this.freq = freq;
        }
        
        public int compareTo(Pair p) {
            if (this.freq != p.freq) {
                return p.freq - this.freq; // Sort by frequency (descending)
            } else {
                return this.val - p.val;   // If same frequency, sort by value (ascending)
            }
        }
    }

    public ArrayList<Integer> sortByFreq(int arr[]) {
        int N = arr.length;

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : arr) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            pq.offer(new Pair(entry.getKey(), entry.getValue()));
        }

        // Step 3: Extract from PriorityQueue and build result list
        ArrayList<Integer> ans = new ArrayList<>();
        while (!pq.isEmpty()) {
            Pair p = pq.poll();
            for (int i = 0; i < p.freq; i++) {
                ans.add(p.val);
            }
        }
        return ans;
    }
}
