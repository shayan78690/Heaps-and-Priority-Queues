class Solution {
    class Pair implements Comparable<Pair> {
        String word;
        int count;

        Pair(String word, int count) {
            this.word = word;
            this.count = count;
        }

        @Override
        public int compareTo(Pair p) {
            if (this.count != p.count) {
                return p.count - this.count; 
            }
            return this.word.compareTo(p.word); 
        }
    }

    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> freqMap = new HashMap<>();
        for (String word : words) {
            freqMap.put(word, freqMap.getOrDefault(word, 0) + 1);
        }

        PriorityQueue<Pair> pq = new PriorityQueue<>();

        for (Map.Entry<String, Integer> entry : freqMap.entrySet()) {
            Pair p = new Pair(entry.getKey(), entry.getValue());
            pq.offer(new Pair(entry.getKey(), entry.getValue()));
        }

        List<String> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            result.add(pq.poll().word); 
        }
        return result;
    }
}
