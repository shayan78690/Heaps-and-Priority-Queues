import java.util.PriorityQueue;

public class Solution {

    static class Node implements Comparable<Node>{
        int data;
        int row;
        int col;

        Node(int data, int row, int col) {
            this.data = data;
            this.row = row;
            this.col = col;
        }

        @Override
        public int compareTo(Node node) {
            return this.data - node.data;
        }
    }
    public static int kSorted(int[][] a, int k, int n) {
        PriorityQueue<Node> pq = new PriorityQueue<>();
        int mini = Integer.MAX_VALUE;
        int maxi = Integer.MIN_VALUE;
        for(int i = 0; i < k; i++) {
            int element = a[i][0];
            mini = Math.min(element, mini);
            maxi = Math.max(element, maxi);
            pq.add(new Node(element, i, 0));
        }
        int start = mini;
        int end = maxi;
        while(!pq.isEmpty()) {
            Node node = pq.poll();
            mini = node.data;
            if(maxi - mini < end - start) {
                start = mini;
                end = maxi;
            }
            if(node.col+1 < n) {
                maxi = Math.max(maxi, a[node.row][node.col+1]);
                pq.add(new Node(a[node.row][node.col+1], node.row, node.col+1));
            } else {
                break;
            }
        }

        return end - start + 1;
    }
}
