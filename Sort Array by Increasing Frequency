class Solution {

    class Pair implements Comparable<Pair>{
        int element;
        int freq;

        Pair(int element, int freq) {
            this.element = element;
            this.freq = freq;
        }

        public int compareTo(Pair p) {
            if(this.freq != p.freq) {
                return this.freq - p.freq;
            } else {
                return p.element - this.element;
            }
        }
    }
    public int[] frequencySort(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(Integer key : map.keySet()) {
            pq.offer(new Pair(key, map.get(key)));
        }

        List<Integer> list = new ArrayList<>();
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            for(int i = 0; i < p.freq; i++) {
                list.add(p.element);
            }
        }
        int ans[] = new int[list.size()];
        for(int i = 0; i < list.size(); i++) {
            ans[i] = list.get(i);
        }
        return ans;

    }
}
