/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    class Pair implements Comparable<Pair>{
        int value;
        ListNode node;

        Pair(int value, ListNode node) {
            this.value = value;
            this.node = node;
        }
          
        @Override
        public int compareTo(Pair p2) {
            return this.value - p2.value;
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(int i = 0; i < lists.length; i++) {
            if(lists[i] != null) {
                pq.add(new Pair(lists[i].val, lists[i]));
            }
        }

        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;
        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            temp.next = p.node;
            temp = temp.next;

            if(p.node.next != null) {
                pq.add(new Pair(p.node.next.val, p.node.next));
            }
        }
        return dummy.next;
    }
}














/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        ListNode head = lists[0];
        for(int i = 1; i < lists.length; i++) {
            head = mergedLL(head, lists[i]);
        }
        return head;
    }

    public ListNode mergedLL(ListNode l1, ListNode l2) {
        ListNode mergedLL = new ListNode(-1);
        ListNode temp = mergedLL;

        while(l1 != null && l2 != null) {
            if(l1.val <= l2.val) {
                temp.next = l1;
                l1 = l1.next;
                temp = temp.next;
            } else {
                temp.next = l2;
                l2 = l2.next;
                temp = temp.next;
            }
        }

        while(l1 != null) {
            temp.next = l1;
            l1 = l1.next;
            temp = temp.next;
        }

        while(l2 != null) {
            temp.next = l2;
            l2 = l2.next;
            temp = temp.next;
        }

        return mergedLL.next;
    }
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        List<Integer> arr =  new ArrayList<>();
        for(int i = 0; i < lists.length; i++) {
            ListNode temp = lists[i];
            while(temp != null) {
                arr.add(temp.val);
                temp = temp.next;
            }
        }

        Collections.sort(arr);

        return constructLL(arr);
    }

    public ListNode constructLL(List<Integer> arr) {
        if(arr.size() == 0){
            return null;
        }

        ListNode head = new ListNode(arr.get(0));
        ListNode temp = head;
        for(int i = 1; i < arr.size(); i++) {
            temp.next = new ListNode(arr.get(i));
            temp = temp.next;
        }
        return head;
    }
}
