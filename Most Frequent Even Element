class Solution {
    class Pair implements Comparable<Pair> {
        int element;
        int freq;

        Pair(int element, int freq) {
            this.element = element;
            this.freq = freq;
        }
       public int compareTo(Pair p) {
            if (this.freq != p.freq) {
                return p.freq - this.freq;
            }
            return this.element - p.element;
        }

    }
    public int mostFrequentEven(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] % 2 == 0) {
                map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
            }
        }
          if (map.isEmpty()) {
            return -1;
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(Integer key : map.keySet()) {
            pq.add(new Pair(key, map.get(key)));
        }
        Pair p = pq.poll();
        return p.element;
    }
}
