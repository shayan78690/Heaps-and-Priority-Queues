class Solution {
    class Pair implements Comparable<Pair> {
        String name;
        int totalWords;

        Pair(String name, int totalWords) {
            this.name = name;
            this.totalWords = totalWords;
        }

        @Override
        public int compareTo(Pair p) {
            if (this.totalWords != p.totalWords) {
                return p.totalWords - this.totalWords;
            } else {
                return p.name.compareTo(this.name);
            }
        }
    }

    public String largestWordCount(String[] messages, String[] senders) {
        int n = messages.length;
       

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String name = senders[i];
            int totalWords = messages[i].split(" ").length;
            map.put(name, map.getOrDefault(name, 0) + totalWords);
            // if(!map.containsKey(name)) {
            // map.put(name, totalWords);
            // } else {
            // map.put(name, map.get(name)+totalWords);
            // }
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            Pair p = new Pair(entry.getKey(), entry.getValue());
            pq.add(p);
        }
        return pq.peek().name;
    }
}









class Solution {
    class Pair implements Comparable<Pair> {
        String name;
        int totalWords;

        Pair(String name, int totalWords) {
            this.name = name;
            this.totalWords = totalWords;
        }

        @Override
        public int compareTo(Pair p) {
            if (this.totalWords != p.totalWords) {
                return p.totalWords - this.totalWords;
            } else {
                return p.name.compareTo(this.name);
            }
        }
    }

    public String largestWordCount(String[] messages, String[] senders) {
        int n = messages.length;
        int wordCount[] = new int[n];
        for (int i = 0; i < n; i++) {
            String words[] = messages[i].split(" ");
            wordCount[i] = words.length;
        }

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String name = senders[i];
            int totalWords = wordCount[i];
            map.put(name, map.getOrDefault(name, 0) + totalWords);
            // if(!map.containsKey(name)) {
            // map.put(name, totalWords);
            // } else {
            // map.put(name, map.get(name)+totalWords);
            // }
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            Pair p = new Pair(entry.getKey(), entry.getValue());
            pq.add(p);
        }
        Pair p = pq.poll();
        return p.name;
    }
}
